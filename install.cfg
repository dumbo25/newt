# name of application to install
Name="Newt MicroSD Card Duplicator"

# Help message
read -r -d '' Help <<- EOM
${Bold}NAME${Normal}
     install.sh is a generic bash script that runs on a Raspberry Pi running
     Raspberry Pi OS to install a MicroSD card duplicator.

${Bold}SYNOPSIS${Normal}
     sudo bash [-bashOptions] install.sh [-installOptions]

${Bold}DESCRIPTION${Normal}
     The installer updates, upgrades and removes system files. It also installs
     required apt or pip3 modules and clones the duplicator's github repository,
     as well as, gitting other files from github. Finally, it creates directories,
     moves files into the correct directories, and sets the files' access

     In case a mistake is made in playing around with the system, the installer
     overwrites previous installs, bringing it back to a known good state.

     Duplicator is utility for cloning MicroSD cards, which are used in
     Raspberry Pis and other devices. The tool takes one image and copies
     it to other MicroSD cards.

     Duplicator uses a website as front-end to linux command line disk copying
     utilities.

${Bold}USAGE${Normal}
     Set up the hardware. (see the tutorial for complete instructions)

     Run this script. Everything gets installed.

     Open a browser on a laptop and enter: ???

${Bold}OPTIONS${Normal}
     c    Do not clear the screen after the update and upgrade
     h    This help
     r    Disable reboot
     u    Skip update and upgrade

${Bold}TURORIAL${Normal}
     https://sites.google.com/site/cartwrightraspberrypiprojects/microsd-card-duplicator

EOM

# list of all raspbian packages to install
declare -a DebianPackages=("dcfldd" "apache2")
# apt_install php-pear  # is this needed ???
# apt_install samba     # is this needed ???

# list of python packages to install
declare -a Pip3Packages=("CherryPy")

# Files to get from github
declare -a GitFiles=(\
    "https://raw.githubusercontent.com/dumbo25/python-template/main/mylog.py" \
)

# get a github repository
GitClone="https://github.com/dumbo25/newt.git"

# Files
# Bash doesn't have multidimensional tables. So, this is my hack to pretend it does
# Each enttry is a row in a table and includes: "filename;fromPath;toPath"
#   do not put / at end of toPath or fromPath
#   to create a path and its directories: ";;toPath"
declare -a MoveFiles=(\
    ";;/home/pi/newt/log" \
    ";;/var/www/images" \
    "index.html;/home/pi/newt/www;/var/www/html" \
    "monitor.html;/home/pi/newt/www;/var/www/html" \
    "skeleton.min.css;/home/pi/newt/www;/var/www/css" \
    "mylog.py;/home/pi;/home/pi/newt" \
    "server.ini;/home/pi/newt/system;/home/pi/newt" \
    "server.py;/home/pi/newt/system;/home/pi/newt" \
    "run_app.sh;/home/pi/newt/system;/home/pi/newt" \
    "usbicon.png;/home/pi/newt/images;/var/www/images" \
)

# The script is run as sudo. So, root owns any moved or retrieved files or created
# directories. This structure and the associated function in install.shchanges 
# ownership to the correct owner. Each entry contains 1) either a filename with path 
# or a path, and 2) its ownership
#
# Each column in the row is separated by ;
#
# If only a directory is given, then chown is done on all subdirectories and files
# So, Change only has to be done on /var/www and it will change /var/www/hmtl,
# /var/www/css, /var/www/images, /var/www/html/index.htm and so on
declare -a ChangeOwnership=(\
    "/home/pi/mylog.py;pi:pi" \
    "/var/www;www-data:www-data" \
    "/home/pi/newt;pi:pi" \
)

declare -a ChangePermissions=(\
    "/home/pi/newt/system/server.py;o+x" \
)

# change file and path permissions or move this into a separate array
# echo "permit   = ${file[3]}"

# list of services to reload
declare -a ReloadServices=("/etc/init.d/apache2")

# list of services to restart
declare -a RestartServices=("/etc/init.d/apache2")

# at the end of the script, reboot or not
Reboot=true

