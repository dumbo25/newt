# configuration file for django.sh

# Django project name used with:
#    cd ~/.
#    django-admin startproject "$DjangoProject"
Name="Newt MicroSD Card Duplicator"
DjangoProject="TestProject"
MinimumDjangoVersion="3.2.8"

# Help message
read -r -d '' Help <<- EOM
${Bold}NAME${Normal}
     django.sh is a generic bash script that sets up a Dhjango project and its
     apps

${Bold}SYNOPSIS${Normal}
     sudo bash [-bashOptions] django.sh [-installOptions]

${Bold}DESCRIPTION${Normal}
     The django.sh script sets up the project, apps and directories for a simple
     django website.

     In case a mistake is made in playing around with the system, the django
     overwrites previous installs, bringing it back to a known good state.

${Bold}USAGE${Normal}
     ??? need to write this section ???

${Bold}OPTIONS${Normal}
     c    ??? need to define the options ???
     h    This help
     r    Disable reboot
     u    Skip update and upgrade

${Bold}TURORIAL${Normal}
     https://sites.google.com/site/cartwrightraspberrypiprojects/microsd-card-duplicator

EOM


read -r -d '' ApacheConfig <<- EOM
<VirtualHost *:80>
# my attempt at creating the apache config
        # The ServerName directive sets the request scheme, hostname and port that
        # the server uses to identify itself. This is used when creating
        # redirection URLs. In the context of virtual hosts, the ServerName
        # specifies what hostname must appear in the request's Host: header to
        # match this virtual host. For the default virtual host (this file) this
        # value is not decisive as it is used as a last resort host regardless.
        # However, you must set it for any further virtual host explicitly.
        #ServerName www.example.com

        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html

        # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
        # error, crit, alert, emerg.
        # It is also possible to configure the loglevel for particular
        # modules, e.g.
        #LogLevel info ssl:warn

        ErrorLog ${APACHE_LOG_DIR}/error.log
        CustomLog ${APACHE_LOG_DIR}/access.log combined

        # For most configuration files from conf-available/, which are
        # enabled or disabled at a global level, it is possible to
        # include a line for only one particular virtual host. For example the
        # following line enables the CGI configuration for this host only
        # after it has been globally disabled with "a2disconf".
        #Include conf-available/serve-cgi-bin.conf

        # make the following changes for the project newt:
        Alias /static /home/pi/$DjangoProject/static
            <Directory /home/pi/$DjangoProject/static>
                Require all granted
            </Directory>

            <Directory /home/pi/$DjangoProject/p_$DjangoProject>
                <Files wsgi.py>
                    Require all granted
                </Files>
            </Directory>

            WSGIDaemonProcess $DjangoProject python-path=/home/pi/$DjangoProject python-home=/home/pi/$DjangoProject/v_$DjangoProject
            WSGIProcessGroup $DjangoProject
            WSGIScriptAlias / /home/pi/$DjangoProject/p_$DjangoProject/wsgi.py

</VirtualHost>

EOM



# list of all the django apps to create, used with:
#    cd ~/"$Project"
#    django-admin startapp <each DjangoApp>
declare -a DjangoApps=("newt" "polls")

# list of all raspbian packages to install
# it's okay if something is already installed. It will check before installing and not install again
declare -a DebianPackages=("python3" "python3-venv" "python3-pip" "sqlite3" "apache2" "apache2-dev"  "libapache2-mod-wsgi-py3")

# list of python packages to install
declare -a Pip3Packages=("virtualenv" "virtualenvwrapper")

# Files to get from github
declare -a GitFiles=(\
)

# get a github repository
GitClone=""

# Files
# Bash doesn't have multidimensional tables. So, this is my hack to pretend it does
# Each enttry is a row in a table and includes: "filename;fromPath;toPath"
#   do not put / at end of toPath or fromPath
#   to create a path and its directories: ";;toPath"
declare -a MoveFiles=(\
)

# The script is not run as sudo.
# This structure and the associated function in django.sh changes 
# ownership to the correct owner. Each entry contains 1) either a filename with path 
# or a path, and 2) its ownership
#
# Each column in the row is separated by ;
#
# If only a directory is given, then chown is done on all subdirectories and files
# So, Change only has to be done on /var/www and it will change /var/www/hmtl,
# /var/www/css, /var/www/images, /var/www/html/index.htm and so on
declare -a ChangeOwnership=(\
)

declare -a ChangePermissions=(\
)

# remove files and directories that are not needed
# Always leave LICENSE.md and READ.md
declare -a CleanUp=(\
)

# list of services to reload
declare -a ReloadServices=("apache2.service")

# list of services to restart
declare -a RestartServices=("apache2.service")

ExitMessage=""

